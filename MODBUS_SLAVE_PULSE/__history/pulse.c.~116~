int rate[10];                    // used to hold last ten IBI values
unsigned long sampleCounter = 0; // used to determine pulse timing
unsigned long lastBeatTime = 0;  // used to find the inter beat inter
int16 P = 0;                      // used to find peak in pulse wave
int16 T = 4000;                     // used to find trough in pulse wave
int thresh = 512;                // used to find instant moment of heart beat
int16 amp = 100;                   // used to hold amplitude of pulse waveform
int16 ad_read;
int cont = 0;
int flag = 0;

boolean firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
boolean secondBeat = true;       // used to seed rate array so we startup with reasonable BPM

void ISR2(){

   ad_read = read_adc();

   if (ad_read > P){
      P = ad_read;
   }

   if (ad_read < T){
      T = ad_read;
   }
   
   if ((P - T) > amp){
      amp = P - T;
   }

   if ((ad_read > 2000) && (flag == 0)){ 
      cont += 1;
      flag = 1;
   }
   
   if ((ad_read < 50) && (flag == 1)){ 
      flag = 0;
   }

}

void reset_variaveis(){
   P = 0;
   T = 4000;
   amp = 0;
   cont = 0;
}

void ler_batidas(){
   reset_variaveis();
   
   for(int tmp = 0; tmp < 100; tmp++){
      ISR2();
      delay_ms(2);
   }
   
   fprintf(PC,"CONT: %u \r\n",cont);
   fprintf(PC,"P: %lu T: %lu A: %lu\r\n",P,T,amp);
}

void ISR(){                                        // triggered when Timer2 counts to 124
  
   Signal = read_adc();                            // read the Pulse Sensor
   
   //fprintf(PC,"ADC: %u\r\n",Signal);
   
   sampleCounter += 2;                             // keep track of the time in mS with this variable
   int N = sampleCounter - lastBeatTime;           // monitor the time since the last beat to avoid noise
   
   //  find the peak and trough of the pulse wave
      
   if(Signal < thresh && N > (IBI/5)*3){           // avoid dichrotic noise by waiting 3/5 of last IBI
   
     if (Signal < T){                              // T is the trough
         T = Signal;                               // keep track of lowest point in pulse wave
      }
   }
   
   if(Signal > thresh && Signal > P){               // thresh condition helps avoid noise
   
           P = Signal;                             // P is the peak
   }
   
   //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
   
     // signal surges up in value every time there is a pulse
   
   if (N > 250){                                   // avoid high frequency noise
   
     if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) ){
   
       Pulse = true;                               // set the Pulse flag when we think there is a pulse
   
       //output_bit(blinkPin,1);                  // turn on pin 13 LED
   
       IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
   
       lastBeatTime = sampleCounter;               // keep track of time for next pulse
   
            
            if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TRUE
   
                firstBeat = false;                 // clear firstBeat flag
   
                return;                            // IBI value is unreliable so discard it
   
               }
   
            if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
   
               secondBeat = false;                 // clear secondBeat flag
   
                  for(int i=0; i<=9; i++){         // seed the running total to get a realisitic BPM at startup
   
                       rate[i] = IBI;                      
   
                   }
   
            }

// keep a running total of the last 10 IBI values

    int16 runningTotal = 0;                   // clear the runningTotal variable


    for(int i=0; i<=8; i++){                // shift data in the rate array

          rate[i] = rate[i+1];              // and drop the oldest IBI value

          runningTotal += rate[i];          // add up the 9 oldest IBI values

        }
        
    rate[9] = IBI;                          // add the latest IBI to the rate array

    runningTotal += rate[9];                // add the latest IBI to runningTotal

    runningTotal /= 10;                     // average the last 10 IBI values

    BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!

    QS = true;                              // set Quantified Self flag

    // QS FLAG IS NOT CLEARED INSIDE THIS ISR
   
      }                       

}

   if (Signal < thresh && Pulse == true){     // when the values are going down, the beat is over

      //digitalWrite(blinkPin,LOW);            // turn off pin 13 LED

      Pulse = false;                         // reset the Pulse flag so we can do it again

      amp = P - T;                           // get amplitude of the pulse wave

      thresh = amp/2 + T;                    // set thresh at 50% of the amplitude

      P = thresh;                            // reset these for next time

      T = thresh;
     
   }
  
  

   if (N > 2500){                             // if 2.5 seconds go by without a beat

      thresh = 512;                          // set thresh default

      P = 512;                               // set P default

      T = 512;                               // set T default

      lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date

      firstBeat = true;                      // set these to avoid noise

      secondBeat = true;                     // when we get the heartbeat back

  }
}// end isr
